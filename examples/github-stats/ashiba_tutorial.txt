[Continuum](www.htttp://continuum.io) was happy to introduce it's ashiba framework last week. Ashiba is an app building framework, allowing you to define layout with HTML or Enaml and write logic in Python. 

In this tutorial I will be building a github statistics web app to plot contributions to open source projects.


The first thing we do is create a new anaconda environment on our system, activate it, and install Ashiba:

`$ conda create -n ashiba anaconda`

`$ source activate ashiba`

`$ git clone git@github.com:ContinuumIO/ashiba.git`

`$ cd ashiba`

`$ python setup.py install`


To see what ashiba apps look like run:

`$ ashiba start ashiba/examples/dataframes/ --open-browser`


Nice right? We will build our own ashiba app to show just how easy it is to create small web apps.


Let us initialize the project with:

`$ ashiba init ashiba-example`

Cd into the new directory and you will see a handlers.py, settings.py, and myapp.html file. 

We create a [github.py](github.gist.com) file which uses the requests library to grab the info then converts the data into a dataframe object so we can manipulate it a little better.

* daily\_commit\_timeline()  = The number of commits per hour in each day
* weekly\_commit\_timeline() = The number of additions and deletions per week


Now that we have our data we can move on to creating the web app. 

First let us edit the settings.py to change the name of the app, the css theme, and replace the icon with one I downloaded from [Github](github.com/logos) by placing the new Ocotocat.png image file in the static/img directory::


    APP_NAME = "Github Stats"
    APP_ICON = "static/img/Octocat.png"

    APP_THEME = "cyborg"




The next step is wrting out the html. Like many of you HTML is not really a strength of mine but the amount we have to write is really minimal.

Here is my file for displaying the metrics.

Easy enough right?











Now we can write out the logic of our app.



First import the ashiba modules and functions from our github file.




Now Ashiba has to be triggered with some type of event. This can be anything from selecting a stock to pushing a button. I choose to my handlers.py function `mybutton__click` to be triggered by clicking the 'Get Stats' button. As you see in myapp.html the id is 'mybutton' and the function is called 'mybutton__click()' denoting it will have to clicked on in the webapp to run.

From there I get the repositiory I want to search from the value you enter, defined in the html as `<li>Choose Repo: <input id="reposearch" value=conda></li>`

We then grab the dataframes and plot them.


Lets return to our command line and run `ashiba start --open-browser .`

We see our app open up and enter a repo to search, continuum's large projects are 'blaze', 'conda', or 'Bokeh'. 


Now to distribute this we 

